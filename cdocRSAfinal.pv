(* Types *)
set ignoreTypes = false.
 
type skey.
type pkey.
type party.
 
free c:channel.
 
(* HKDF functions *)
fun hkdf_extract(bitstring): bitstring.
fun hkdf_expand(bitstring): bitstring.

fun pk(skey): pkey.

(* XOR function *)
fun xor(bitstring,bitstring):bitstring.
equation forall x:bitstring, y:bitstring; xor(xor(x,y),y)=x.
equation forall x:bitstring; xor(x,xor(x,x))=x.
equation forall x:bitstring; xor(xor(x,x),x)=x.
equation forall x:bitstring, y:bitstring; xor(y,xor(x,x))=y.
equation forall x:bitstring, y:bitstring; xor(xor(x,y),xor(x,x))= xor(x,y).
equation forall x:bitstring, y:bitstring; xor(xor(x,y),xor(y,y))= xor(x,y).
 
(* Public key encryption and decryption *)
fun aenc(pkey, bitstring): bitstring.
reduc forall m:bitstring, k:skey; adec(k, aenc(pk(k),m)) = m.
 
(* Symmetric encryption and decryption *)
fun senc(bitstring, bitstring): bitstring.
reduc forall m:bitstring, k:bitstring; sdec(senc(m,k),k) = m.
 
(* secret between two parties *)
fun m(party,party) : bitstring [private]. (* private because attacker cannot derive secret just from party names *)
 
free skB : skey [private].
free kekB : bitstring [private]. (* Not generated because only 1 B party and no reverse function *)
 
(* Key table *)
table pkeys(party,pkey).
 
(* Queries & Events *)
event aFinished().
event bFinished().
 
event honest(party).
 
event viewBeginA(party,party,bitstring).
event viewBeginB(party,party,bitstring).
event viewEndA(party,party,bitstring).
event viewEndB(party,party,bitstring).
 
query event(aFinished()).
query event(bFinished()).
 
(* Attacker tries to guess secret message *)
query A : party, B : party; event(honest(A)) && event(honest(B)) && attacker(m(A,B)).
 
query A : party, B : party, keyAB : bitstring; event(honest(A)) && event(honest(B)) && event(viewEndB(A,B,keyAB)) ==> event(viewBeginA(A,B,keyAB)).
 
query A : party, B : party, keyAB : bitstring; event(honest(A)) && event(honest(B)) && inj-event(viewEndB(A,B,keyAB)) ==> inj-event(viewBeginA(A,B,keyAB)).
 
let processA (A: party, B : party) =     
        	    
        	(* Generating CEK from FMK using HKDF *)
        	new nonce:bitstring;
        	let fmk = hkdf_extract(nonce) in
        	let cek = hkdf_expand(fmk) in    
        	event viewBeginA(A,B, cek);   
    
        	(* Message encryption *)
        	let cipher = senc(m(A,B), cek) in
    
        	(* A XORs *)
        	let ckB = xor(fmk, kekB) in
    
        	(* Retrieves PK of B *)
        	get pkeys(=B, pkB: pkey) in
    
        	(* PK encapsulation *)
        	let capsB = aenc(pkB, kekB) in      	 
 
        	(* Sends info to B *)
        	out(c, (cipher, ckB, capsB));
    
        	event aFinished();
        	event viewEndA(A,B, cek);
        	0.
 
let processB (B : party, A : party) =    
 
        	(* Receive info from A *)
        	in (c, (cipher1:bitstring, ckB1: bitstring, capsB1: bitstring));
    
        	(* Decapsulation *)
        	let kekB1 = adec(skB, capsB1) in   
    
        	(* XOR and cek derivation *)  
        	let fmk1 = xor(ckB1, kekB1) in
        	let cek1 = hkdf_expand(fmk1) in   
        	event viewBeginB(A,B, cek1);
        	   
        	(* Decryption *)
        	let (=m(A,B)) = sdec(cipher1, cek1) in (* checks if the decryption gives original message *)  
        	event bFinished();   
        	event viewEndB(A,B, cek1);  
        	0.   
 
let honestUser(A: party, B: party) =
    
        	event honest(A);
        	(processA(A, B))
        	|
        	(processB(B, A)).    
    
let dishonestUser =

        	new name: party;
        	in(c, skX : skey);
        	let pkX = pk(skX) in
    
        	insert pkeys(name,pkX);    
        	out (c, (name,pkX));
    
        	0.
    
(* Main process *)
process    
        	new partyA: party;
        	new partyB: party;
        	let pkB = pk(skB) in (* Creates key pair for B *)
        	insert pkeys(partyB, pkB);
    
        	(!honestUser(partyA, partyB) | !dishonestUser)
